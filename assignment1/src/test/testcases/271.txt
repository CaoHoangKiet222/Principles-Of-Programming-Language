
        PARENT: function int(i: int) { return (i - 1) / 2; }

        LEFT:  function int(i: int) { return (2 * i + 1); }

        RIGHT: function int(i: int) { return (2 * i + 2); }

        reheapDown: function void(maxHeap: array [100] of int, numberOfElements: int, index: int)
        {
            if (index >= numberOfElements) {
                return;
            }
                left: int = LEFT(index);
                right: int = RIGHT(index);
         
                largest: int = index;
         
                if (left < numberOfElements && (maxHeap[left] > maxHeap[index])) {
                    largest = left;
                }
         
                if (right < numberOfElements && (maxHeap[right] > maxHeap[largest])) {
                    largest = right;
                }
         
                if (largest != index)
                {
                    temp:int  = maxHeap[index];
                    maxHeap[index] = maxHeap[largest];
                    maxHeap[largest] = temp;
                    reheapDown(maxHeap, numberOfElements, largest);
                }
        }
    